#include <stdio.h>

// Function to compute the greatest common divisor
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

// Extended Euclidean Algorithm to find modular inverse
int modInverse(int e, int phi) {
    int t = 0, new_t = 1;
    int r = phi, new_r = e;
    
    while (new_r != 0) {
        int quotient = r / new_r;
        int temp = t;
        t = new_t;
        new_t = temp - quotient * new_t;
        temp = r;
        r = new_r;
        new_r = temp - quotient * new_r;
    }

    if (r > 1) return -1;
    if (t < 0) t += phi;
    return t;
}

int main() {
    int e = 31, n = 3599;
    int p = 53, q = 67;
    int phi = (p - 1) * (q - 1);
    
    int d = modInverse(e, phi);

    if (d == -1)
        printf("No modular inverse found!\n");
    else
        printf("Private key d: %d\n", d);

    return 0;
}
