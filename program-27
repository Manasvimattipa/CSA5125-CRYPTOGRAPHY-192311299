#include <stdio.h>
#include <stdint.h>

#define N 9516311845790656153499716760847001433441357  // Large modulus
#define E 65537  // Common RSA exponent

// Function to compute modular exponentiation (RSA Encryption)
uint64_t modExp(uint64_t base, uint64_t exp, uint64_t mod) {
    uint64_t result = 1;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

// RSA Encryption (each letter separately)
void encryptRSA(char *plaintext, uint64_t ciphertext[], int length) {
    for (int i = 0; i < length; i++) {
        uint64_t num = plaintext[i] - 'A';
        ciphertext[i] = modExp(num, E, N);
    }
}

// Simulated Frequency Attack (guessing common letters)
void frequencyAttack(uint64_t ciphertext[], int length) {
    char commonLetters[] = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
    printf("Possible plaintext (based on frequency analysis): ");
    for (int i = 0; i < length; i++) {
        printf("%c", commonLetters[i % 26]);
    }
    printf("\n");
}

int main() {
    char plaintext[] = "HELLO";
    uint64_t ciphertext[5];

    encryptRSA(plaintext, ciphertext, 5);

    printf("Ciphertext: ");
    for (int i = 0; i < 5; i++) printf("%llu ", ciphertext[i]);
    printf("\n");

    frequencyAttack(ciphertext, 5);

    return 0;
}
