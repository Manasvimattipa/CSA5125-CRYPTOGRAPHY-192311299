#include <stdio.h>
#include <stdint.h>

#define BLOCK_SIZE 8
#define KEY_SIZE 10
#define IV 0xAA  // Binary IV: 10101010

uint16_t sdes_encrypt(uint16_t plaintext, uint16_t key) {
    return ((plaintext ^ key) << 1) & 0xFFFF;
}

uint16_t sdes_decrypt(uint16_t ciphertext, uint16_t key) {
    return ((ciphertext >> 1) ^ key) & 0xFFFF;
}

void encryptCBC(uint16_t plaintext[], uint16_t key, uint16_t ciphertext[], int length) {
    uint16_t prev_block = IV;
    for (int i = 0; i < length; i++) {
        plaintext[i] ^= prev_block;
        ciphertext[i] = sdes_encrypt(plaintext[i], key);
        prev_block = ciphertext[i];
    }
}

void decryptCBC(uint16_t ciphertext[], uint16_t key, uint16_t plaintext[], int length) {
    uint16_t prev_block = IV;
    for (int i = 0; i < length; i++) {
        plaintext[i] = sdes_decrypt(ciphertext[i], key) ^ prev_block;
        prev_block = ciphertext[i];
    }
}

int main() {
    uint16_t plaintext[] = {0x0123};  // Binary: 0000000100100011
    uint16_t key = 0x1FD;             // Binary: 01111111101
    uint16_t ciphertext[BLOCK_SIZE];
    uint16_t decrypted[BLOCK_SIZE];

    encryptCBC(plaintext, key, ciphertext, 1);
    decryptCBC(ciphertext, key, decrypted, 1);

    printf("Original Plaintext:  %04X\n", plaintext[0]);
    printf("Ciphertext:          %04X\n", ciphertext[0]);
    printf("Decrypted Plaintext: %04X\n", decrypted[0]);

    return 0;
}
