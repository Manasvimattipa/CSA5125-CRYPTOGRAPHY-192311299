#include <stdio.h>
#include <string.h>
#include <ctype.h>
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m; a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}


void affineEncrypt(char *plaintext, char *ciphertext, int a, int b) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            int p = plaintext[i] - base;
            int c = (a * p + b) % 26;
            ciphertext[i] = c + base;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
}

// Decrypt ciphertext using affine cipher
void affineDecrypt(char *ciphertext, char *plaintext, int a, int b) {
    int a_inv = modInverse(a, 26);
    if (a_inv == 0) {
        printf("Error: 'a' has no modular inverse mod 26, can't decrypt.\n");
        return;
    }

    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            int c = ciphertext[i] - base;
            int p = (a_inv * (c - b + 26)) % 26;
            plaintext[i] = p + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
}

int main() {
    char plaintext[256], ciphertext[256], decrypted[256];
    int a, b;

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0; // Remove newline

    printf("Enter key a (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter key b: ");
    scanf("%d", &b);

    if (gcd(a, 26) != 1) {
        printf("Error: a and 26 are not coprime. Choose different 'a'.\n");
        return 1;
    }

    affineEncrypt(plaintext, ciphertext, a, b);
    ciphertext[strlen(plaintext)] = '\0';

    printf("Encrypted text: %s\n", ciphertext);

    affineDecrypt(ciphertext, decrypted, a, b);
    decrypted[strlen(plaintext)] = '\0';

    printf("Decrypted text: %s\n", decrypted);

    return 0;
}
