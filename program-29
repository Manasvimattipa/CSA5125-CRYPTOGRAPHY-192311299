#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define STATE_SIZE 1600
#define BLOCK_SIZE 1024
#define LANE_SIZE 64
#define NUM_LANES (STATE_SIZE / LANE_SIZE)
#define CAPACITY_LANES ((STATE_SIZE - BLOCK_SIZE) / LANE_SIZE)

// Function to initialize state matrix
void initializeState(uint64_t state[NUM_LANES]) {
    for (int i = 0; i < NUM_LANES; i++) {
        state[i] = (i < CAPACITY_LANES) ? 0 : 1; // Capacity portion starts as zero
    }
}

// Function to check how long before all capacity lanes have nonzero bits
int countIterations(uint64_t state[NUM_LANES]) {
    int iterations = 0;
    while (1) {
        int allNonZero = 1;
        for (int i = 0; i < CAPACITY_LANES; i++) {
            if (state[i] == 0) {
                state[i] = 1; // Simulated message absorption
                allNonZero = 0;
            }
        }
        iterations++;
        if (allNonZero) break;
    }
    return iterations;
}

int main() {
    uint64_t state[NUM_LANES];
    initializeState(state);

    int iterations = countIterations(state);

    printf("Iterations needed for all capacity lanes to have nonzero bits: %d\n", iterations);
    
    return 0;
}
