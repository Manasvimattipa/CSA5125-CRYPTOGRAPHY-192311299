#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE];
void generateMatrix(char *key) {
    int used[26] = {0};
    int k = 0;

    used['J' - 'A'] = 1;

    for (int i = 0; key[i]; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (!isalpha(ch) || used[ch - 'A']) continue;
        matrix[k / SIZE][k % SIZE] = ch;
        used[ch - 'A'] = 1;
        k++;
    }

    
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            matrix[k / SIZE][k % SIZE] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
}

void findPosition(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}

void encrypt(char *plaintext, char *ciphertext) {
    char prepared[100] = {0};
    int len = 0;

    
    for (int i = 0; plaintext[i]; i++) {
        char ch = toupper(plaintext[i]);
        if (!isalpha(ch)) continue;
        if (ch == 'J') ch = 'I';
        prepared[len++] = ch;
    }

  
    for (int i = 0; i < len; i += 2) {
        if (i + 1 == len) {
            prepared[len++] = 'X';
        } else if (prepared[i] == prepared[i + 1]) {
            for (int j = len; j > i + 1; j--)
                prepared[j] = prepared[j - 1];
            prepared[i + 1] = 'X';
            len++;
        }
    }

    int idx = 0;
    for (int i = 0; i < len; i += 2) {
        int r1, c1, r2, c2;
        findPosition(prepared[i], &r1, &c1);
        findPosition(prepared[i + 1], &r2, &c2);

        if (r1 == r2) {
            ciphertext[idx++] = matrix[r1][(c1 + 1) % SIZE];
            ciphertext[idx++] = matrix[r2][(c2 + 1) % SIZE];
        } else if (c1 == c2) {
            ciphertext[idx++] = matrix[(r1 + 1) % SIZE][c1];
            ciphertext[idx++] = matrix[(r2 + 1) % SIZE][c2];
        } else {
            ciphertext[idx++] = matrix[r1][c2];
            ciphertext[idx++] = matrix[r2][c1];
        }
    }
    ciphertext[idx] = '\0';
}

void printMatrix() {
    printf("\nPlayfair Key Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++)
            printf("%c ", matrix[i][j]);
        printf("\n");
    }
}

int main() {
    char key[50], plaintext[100], ciphertext[100];

    printf("Enter keyword: ");
    scanf("%s", key);

    printf("Enter plaintext: ");
    scanf("%s", plaintext);

    generateMatrix(key);
    printMatrix();
    encrypt(plaintext, ciphertext);

    printf("\nEncrypted Text: %s\n", ciphertext);

    return 0;
}
