#include <stdio.h>
#include <stdint.h>

#define BLOCK_SIZE 8
#define KEY_SIZE 10
#define COUNTER_START 0x00

uint16_t sdes_encrypt(uint16_t value, uint16_t key) {
    return ((value ^ key) << 1) & 0xFFFF;
}

uint16_t sdes_decrypt(uint16_t value, uint16_t key) {
    return ((value >> 1) ^ key) & 0xFFFF;
}

void encryptCounterMode(uint16_t plaintext[], uint16_t key, uint16_t ciphertext[], int length) {
    uint16_t counter = COUNTER_START;
    for (int i = 0; i < length; i++) {
        uint16_t keystream = sdes_encrypt(counter, key);
        ciphertext[i] = plaintext[i] ^ keystream;
        counter++;
    }
}

void decryptCounterMode(uint16_t ciphertext[], uint16_t key, uint16_t plaintext[], int length) {
    uint16_t counter = COUNTER_START;
    for (int i = 0; i < length; i++) {
        uint16_t keystream = sdes_encrypt(counter, key);
        plaintext[i] = ciphertext[i] ^ keystream;
        counter++;
    }
}

int main() {
    uint16_t plaintext[] = {0x0102, 0x0400};
    uint16_t key = 0x1FD;
    uint16_t ciphertext[BLOCK_SIZE];
    uint16_t decrypted[BLOCK_SIZE];

    encryptCounterMode(plaintext, key, ciphertext, 2);
    decryptCounterMode(ciphertext, key, decrypted, 2);

    printf("Original Plaintext:  %04X %04X\n", plaintext[0], plaintext[1]);
    printf("Ciphertext:          %04X %04X\n", ciphertext[0], ciphertext[1]);
    printf("Decrypted Plaintext: %04X %04X\n", decrypted[0], decrypted[1]);

    return 0;
}
